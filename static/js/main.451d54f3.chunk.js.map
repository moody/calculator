{"version":3,"sources":["components/Button/Button.js","components/Calculator/calculator-utils.js","components/Calculator/Calculator.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","event","handleButton","target","id","value","style","gridArea","isNaN","parseInt","background","react_default","a","createElement","Component","BUTTON_DATA","one","two","three","four","five","six","seven","eight","nine","zero","decimal","divide","multiply","subtract","add","equals","clear","BUTTON_KEYS","1","2","3","4","5","6","7","8","9","0",".","/","*","-","+","Enter"," ","evaluate","b","op","result","Number","toPrecision","calculate","arr","length","current","i","Calculator","state","history","isDirty","_this2","document","addEventListener","Utils","key","hasOwnProperty","toConsumableArray","match","push","concat","setState","buttons","components_Button_Button","join","App","components_Calculator_Calculator","href","Boolean","window","location","hostname","ReactDOM","render","components_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.451d54f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Button.scss';\r\n\r\nclass Button extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  onClick(event) {\r\n    this.props.handleButton(event.target.id);\r\n  }\r\n\r\n  render() {\r\n    let id = this.props.id;\r\n    let value = this.props.value;\r\n    // Add grid-area\r\n    let style = { gridArea: id };\r\n    // Add background if number\r\n    if (!isNaN(parseInt(value))) style.background = \"rgba(0, 0, 0, 0.9)\";\r\n    \r\n    return (\r\n      <button id={id} style={style} onClick={this.onClick}>{value}</button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","export const DIVIDE_BY_ZERO = \"CANNOT DIVIDE BY ZERO\";\r\nexport const ERROR = \"ERROR\";\r\n\r\nexport const DIVIDE = \"\\xF7\";\r\nexport const MULTIPLY = \"\\xD7\";\r\nexport const SUBTRACT = \"-\";\r\nexport const ADD = \"+\";\r\nexport const EQUALS = \"=\";\r\n\r\nexport const BUTTON_DATA = {\r\n  one: \"1\",\r\n  two: \"2\",\r\n  three: \"3\",\r\n  four: \"4\",\r\n  five: \"5\",\r\n  six: \"6\",\r\n  seven: \"7\",\r\n  eight: \"8\",\r\n  nine: \"9\",\r\n  zero: \"0\",\r\n  decimal: \".\",\r\n  \r\n  divide: DIVIDE,\r\n  multiply: MULTIPLY,\r\n  subtract: SUBTRACT,\r\n  add: ADD,\r\n  equals: EQUALS,\r\n\r\n  clear: \"C\"\r\n}\r\n\r\nexport const BUTTON_KEYS = {\r\n  \"1\": \"one\",\r\n  \"2\": \"two\",\r\n  \"3\": \"three\",\r\n  \"4\": \"four\",\r\n  \"5\": \"five\",\r\n  \"6\": \"six\",\r\n  \"7\": \"seven\",\r\n  \"8\": \"eight\",\r\n  \"9\": \"nine\",\r\n  \"0\": \"zero\",\r\n  \".\": \"decimal\",\r\n  \"/\": \"divide\",\r\n  \"*\": \"multiply\",\r\n  \"-\": \"subtract\",\r\n  \"+\": \"add\",\r\n  \"Enter\": \"equals\",\r\n  \" \": \"clear\"\r\n}\r\n\r\n/**\r\n * Returns the number obtained by performing an operation on a and b.\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {string} op\r\n */\r\nexport const evaluate = (a, b, op) => {\r\n  if (!(typeof a === \"number\") || !(typeof b === \"number\")) {\r\n    return ERROR;\r\n  }\r\n\r\n  let result;\r\n\r\n  switch (op) {\r\n    case DIVIDE:\r\n      result = (b !== 0) ? (a / b) : DIVIDE_BY_ZERO;\r\n      break;\r\n    case MULTIPLY:\r\n      result = a * b;\r\n      break;\r\n    case SUBTRACT:\r\n      result = a - b;\r\n      break;\r\n    case ADD:\r\n      result = a + b;\r\n      break;\r\n    default:\r\n      result = ERROR;\r\n      break;\r\n  }\r\n  \r\n  // Avoid round-off errors\r\n  if (result !== ERROR && result !== DIVIDE_BY_ZERO) {\r\n    result = Number(Number(result).toPrecision(12));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Evaluates an array of alternating numbers and operators and returns the final result.\r\n * @param {[]} arr (e.g. [1, \"+\", 2])\r\n */\r\nexport const calculate = (arr) => {\r\n  if (arr.length === 1) {\r\n    return (typeof arr[0] === \"number\") ? arr[0] : ERROR;\r\n  } else if ((arr.length < 3) || (arr.length % 2 === 0)) {\r\n    return ERROR;\r\n  }\r\n  \r\n  let current = 0;\r\n  \r\n  for (let i = 0; i < (arr.length - 2); i += 2) {\r\n    let a = (i === 0) ? arr[i] : current;\r\n    let op = arr[i+1];\r\n    let b = arr[i+2];\r\n    current = evaluate(a, b, op);\r\n    if (typeof current !== \"number\") break;\r\n  }\r\n\r\n  return current;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from '../Button/Button';\r\nimport * as Utils from './calculator-utils';\r\nimport './Calculator.scss';\r\n\r\nclass Calculator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      current: \"0\",\r\n      history: [],\r\n      isDirty: true\r\n    }\r\n\r\n    this.handleButton = this.handleButton.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    document.addEventListener(\"keypress\", event => {\r\n      this.handleButton(Utils.BUTTON_KEYS[event.key]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the state of the calculator based on the button that was pressed.\r\n   * @param {string} id the button's id\r\n   */\r\n  handleButton(id) {\r\n    if (!Utils.BUTTON_DATA.hasOwnProperty(id)) return;\r\n    let value = Utils.BUTTON_DATA[id];\r\n\r\n    if (!isNaN(parseInt(value))) {\r\n      if (this.state.current === \"0\" && value === \"0\") return;\r\n      this.setState({\r\n        current: this.state.isDirty ? value : this.state.current + value,\r\n        isDirty: false\r\n      });\r\n    } else {\r\n      let current = this.state.current;\r\n      let isDirty = this.state.isDirty;\r\n      let history = [...this.state.history];\r\n\r\n      switch (id) {\r\n        case \"clear\":\r\n          current = \"0\";\r\n          isDirty = true;\r\n          history = [];\r\n          break;\r\n        case \"decimal\":\r\n          if (isDirty) {\r\n            current = \"0.\";\r\n            isDirty = false;\r\n          } else if (!current.match(/\\./g)) {\r\n            current = current + \".\";\r\n            isDirty = false;\r\n          }\r\n          break;\r\n        case \"divide\":\r\n        case \"multiply\":\r\n        case \"subtract\":\r\n        case \"add\":\r\n          if (current === Utils.ERROR || current === Utils.DIVIDE_BY_ZERO) {\r\n            // Return if error is displayed\r\n            return;\r\n          } else if (isDirty && history.length >= 2) {\r\n            // Change operation\r\n            history[history.length - 1] = value;\r\n          } else {\r\n            // Add current number to history\r\n            history.push(Number(current));\r\n            // If calculate() is successful, add operation to history\r\n            // Otherwise, reset history\r\n            let result = Utils.calculate(history);\r\n            if (typeof result === \"number\") {\r\n              history.push(value);\r\n            } else {\r\n              history = [];\r\n            }\r\n            current = `${result}`;\r\n            isDirty = true;\r\n          }\r\n          break;\r\n        case \"equals\":\r\n          if (history.length >= 2) {\r\n            history.push(Number(current));\r\n            current = `${Utils.calculate(history)}`;\r\n            history = [];\r\n          }\r\n          isDirty = true;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      this.setState({ current, isDirty, history });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let buttons = [];\r\n    for (let id in Utils.BUTTON_DATA) {\r\n      buttons.push(\r\n        <Button\r\n          key={buttons.length}\r\n          id={id}\r\n          value={Utils.BUTTON_DATA[id]}\r\n          handleButton={this.handleButton}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div id=\"Calculator\">\r\n        <div id=\"header\">\r\n          <div id=\"history\">{this.state.history.join(\" \")}</div>\r\n          <hr/>\r\n          <div id=\"display\">{this.state.current}</div>\r\n        </div>\r\n\r\n        <div id=\"buttons\">\r\n          {buttons}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from 'react';\nimport Calculator from '../Calculator/Calculator';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"App\">\n        <Calculator/>\n        <footer id=\"footer\">\n          <p>made by <a href=\"https://github.com/moody\">justin moody</a></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-concert-one';\nimport 'typeface-indie-flower';\nimport 'normalize.css';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}